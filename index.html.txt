<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>H·ªçc qua tr√≤ ch∆°i ‚Äî Thi·∫øt b·ªã s·ªë & Bluetooth</title>

  <!-- Tailwind (play CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;800&display=swap" rel="stylesheet">

  <style>
    body { font-family: 'Inter', system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; }
    .glow {
      background: linear-gradient(90deg, rgba(99,102,241,0.12), rgba(139,92,246,0.08));
      border-radius: 16px;
      backdrop-filter: blur(4px);
    }
    /* header gradient animated */
    .wave {
      background: linear-gradient(90deg,#7c3aed,#4f46e5,#06b6d4);
      background-size: 200% 200%;
      animation: wave 6s linear infinite;
    }
    @keyframes wave { 0% { background-position: 0% 50% } 50% { background-position: 100% 50% } 100% { background-position: 0% 50% } }
    /* tiny confetti canvas full-screen */
    #confetti { position: fixed; left:0; top:0; width:100%; height:100%; pointer-events:none; z-index:60; }
  </style>
</head>
<body class="bg-gradient-to-b from-gray-50 to-white text-gray-900">
  <canvas id="confetti"></canvas>
  <div id="root" class="min-h-screen p-6"></div>

  <!-- React UMD -->
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <script type="text/babel">
  const { useState, useEffect, useRef } = React;

  /* ---------------- Logo (SVG) ---------------- */
  function Logo({size=44}) {
    return (
      <div className="flex items-center gap-3">
        <div className="rounded-lg p-1" style={{width:size, height:size, background: 'linear-gradient(135deg,#7c3aed,#06b6d4)'}}>
          <svg viewBox="0 0 24 24" className="w-full h-full" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="2" y="3" width="20" height="14" rx="2" fill="white" opacity="0.08"/>
            <path d="M7 8h10M7 11h6" stroke="white" strokeWidth="1.4" strokeLinecap="round" strokeLinejoin="round"/>
            <circle cx="8" cy="16.5" r="1.6" fill="white" opacity="0.9"/>
            <circle cx="16" cy="16.5" r="1.6" fill="white" opacity="0.9"/>
          </svg>
        </div>
        <div>
          <div className="text-lg font-extrabold text-gray-900">DeviceGames</div>
          <div className="text-xs -mt-1 text-gray-500">H·ªçc + Tr√≤ ch∆°i + Th·ª±c h√†nh</div>
        </div>
      </div>
    );
  }

  /* ---------------- Confetti (small) ---------------- */
  function fireConfetti() {
    const canvas = document.getElementById('confetti');
    if(!canvas) return;
    const ctx = canvas.getContext('2d');
    const w = canvas.width = window.innerWidth;
    const h = canvas.height = window.innerHeight;
    const particles = [];
    for(let i=0;i<90;i++){
      particles.push({
        x: Math.random()*w,
        y: -20 - Math.random()*h*0.2,
        vx: (Math.random()-0.5)*5,
        vy: 2 + Math.random()*4,
        size: 6+Math.random()*8,
        color: ['#ff7b7b','#ffd36b','#7ee787','#7bd2ff','#cba6ff'][Math.floor(Math.random()*5)],
        rot: Math.random()*360,
        vrot: (Math.random()-0.5)*10
      });
    }
    let t=0;
    function frame(){
      ctx.clearRect(0,0,w,h);
      t++;
      for(let p of particles){
        p.x += p.vx;
        p.y += p.vy;
        p.vy += 0.03;
        p.rot += p.vrot;
        ctx.save();
        ctx.translate(p.x,p.y);
        ctx.rotate(p.rot*Math.PI/180);
        ctx.fillStyle = p.color;
        ctx.fillRect(-p.size/2,-p.size/2,p.size,p.size*0.6);
        ctx.restore();
      }
      if(t<180) requestAnimationFrame(frame);
      else ctx.clearRect(0,0,w,h);
    }
    frame();
  }

  /* ---------------- App ---------------- */
  function App(){
    return (
      <div className="max-w-5xl mx-auto">
        <header className={"p-5 rounded-2xl wave text-white shadow-lg flex items-center justify-between"}>
          <div className="flex items-center gap-4">
            <Logo />
          </div>
          <div className="text-right">
            <div className="text-sm font-semibold">B√†i ki·ªÉm tra: Thi·∫øt b·ªã s·ªë</div>
            <div className="text-xs text-white/80">H∆∞·ªõng d·∫´n k·∫øt n·ªëi Bluetooth + 2 tr√≤ ch∆°i</div>
          </div>
        </header>

        <main className="mt-6 grid gap-6 md:grid-cols-3">
          <section className="md:col-span-2 bg-white p-5 rounded-2xl shadow-sm glow">
            <div className="flex items-start justify-between gap-4">
              <div>
                <h2 className="text-xl font-bold">Ch∆°i & H·ªçc ‚Äî Thi·∫øt b·ªã s·ªë</h2>
                <p className="text-sm text-gray-600 mt-1">Hai tr√≤ ch∆°i ng·∫Øn ƒë·ªÉ ki·ªÉm tra ki·∫øn th·ª©c + ghi nh·ªõ ch·ª©c nƒÉng thi·∫øt b·ªã ph·ªï bi·∫øn.</p>
              </div>
              <div className="text-sm text-gray-500">
                Th·ªùi gian l√†m b√†i: <span className="font-semibold">Kh√¥ng gi·ªõi h·∫°n</span>
              </div>
            </div>

            <div className="mt-4 grid gap-4 md:grid-cols-2">
              <div className="p-4 rounded-lg border">
                <QuizEnhanced />
              </div>
              <div className="p-4 rounded-lg border">
                <MatchEnhanced />
              </div>
            </div>
          </section>

          <aside className="bg-white p-5 rounded-2xl shadow-sm">
            <h3 className="font-bold">H∆∞·ªõng d·∫´n Bluetooth</h3>
            <p className="text-sm text-gray-600 mt-1">C√°c b∆∞·ªõc ng·∫Øn g·ªçn cho Windows / macOS / Android / iPhone. M·ªü t·ª´ng m·ª•c ƒë·ªÉ ƒë·ªçc chi ti·∫øt.</p>
            <BluetoothAccordion />
            <div className="mt-4 text-xs text-gray-500">
              <strong>L∆∞u √Ω:</strong> iPhone kh√¥ng chia s·∫ª Bluetooth tr·ª±c ti·∫øp v·ªõi Windows/Android. D√πng Airdrop ho·∫∑c c√°p/d·ªãch v·ª• ƒë√°m m√¢y khi c·∫ßn.
            </div>
          </aside>
        </main>

        <footer className="mt-6 text-center text-sm text-gray-500">
          ¬© {new Date().getFullYear()} ‚Äî Thi·∫øt k·∫ø b·ªüi b·∫°n + tr·ª£ th·ªß ·∫£o. Mu·ªën file ZIP ho·∫∑c tri·ªÉn khai l√™n GitHub Pages? M√¨nh h∆∞·ªõng d·∫´n ti·∫øp.
        </footer>
      </div>
    );
  }

  /* ---------------- Enhanced Quiz (with best score) ---------------- */
  const QUIZ_QUESTIONS = [
    { q: "Thi·∫øt b·ªã n√†o th∆∞·ªùng d√πng ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu b·∫±ng gi·ªçng n√≥i?", choices: ["Microphone","Monitor","Router","Printer"], a:0 },
    { q: "Bluetooth l√† g√¨?", choices: ["M·ªôt lo·∫°i m√†n h√¨nh", "Giao th·ª©c kh√¥ng d√¢y t·∫ßm ng·∫Øn","M·ªôt h√£ng ƒëi·ªán tho·∫°i","Ph·∫ßn m·ªÅm di·ªát virus"], a:1 },
    { q: "Thi·∫øt b·ªã l∆∞u tr·ªØ portable g·∫Øn ngo√†i ph·ªï bi·∫øn:", choices: ["USB flash drive","Camera","Keyboard","Microphone"], a:0 },
    { q: "C·ªïng USB-C th∆∞·ªùng h·ªó tr·ª£ ƒë·∫∑c t√≠nh n√†o?", choices: ["Ch·ªâ s·∫°c","S·∫°c + truy·ªÅn d·ªØ li·ªáu + xu·∫•t h√¨nh","Ch·ªâ k·∫øt n·ªëi m√†n h√¨nh","Kh√¥ng d√πng ƒë·ªÉ s·∫°c"], a:1 },
  ];

  function QuizEnhanced(){
    const [idx, setIdx] = useState(0);
    const [score, setScore] = useState(0);
    const [done, setDone] = useState(false);
    const [best, setBest] = useState(() => {
      const v = localStorage.getItem('dg_quiz_best');
      return v ? Number(v) : 0;
    });

    useEffect(()=> {
      // reset when questions length changes (not necessary here)
    },[]);

    function choose(i){
      if(i === QUIZ_QUESTIONS[idx].a) setScore(s => s+1);
      const next = idx + 1;
      if(next >= QUIZ_QUESTIONS.length) {
        setDone(true);
        const final = (score + (i===QUIZ_QUESTIONS[idx].a?1:0));
        if(final > best) { localStorage.setItem('dg_quiz_best', String(final)); setBest(final); }
        setTimeout(()=>fireConfetti(), 200);
      } else setIdx(next);
    }
    function reset(){
      setIdx(0); setScore(0); setDone(false);
    }

    return (
      <div>
        <div className="flex items-center justify-between">
          <div><strong>Quiz nhanh</strong><div className="text-xs text-gray-500">Ki·∫øn th·ª©c c∆° b·∫£n</div></div>
          <div className="text-xs text-gray-500">Best: <span className="font-semibold">{best}</span>/{QUIZ_QUESTIONS.length}</div>
        </div>

        <div className="mt-3">
          {!done ? (
            <>
              <div className="text-sm text-gray-600 mb-2">C√¢u {idx+1}/{QUIZ_QUESTIONS.length}</div>
              <div className="font-medium">{QUIZ_QUESTIONS[idx].q}</div>
              <div className="grid gap-2 mt-3">
                {QUIZ_QUESTIONS[idx].choices.map((c,i)=> (
                  <button key={i} onClick={()=>choose(i)} className="p-2 rounded-md border text-left hover:shadow-sm bg-white">{c}</button>
                ))}
              </div>
            </>
          ) : (
            <div className="text-center">
              <div className="text-lg font-bold">Ho√†n th√†nh üéâ</div>
              <div className="mt-2">ƒêi·ªÉm: <span className="font-extrabold">{score}</span> / {QUIZ_QUESTIONS.length}</div>
              <div className="mt-3 flex gap-2 justify-center">
                <button onClick={reset} className="px-3 py-1 rounded-md border">L√†m l·∫°i</button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  /* ---------------- Enhanced Match (with moves + best time) ---------------- */
  const MATCH_ITEMS = [
    { id:"phone", name:"ƒêi·ªán tho·∫°i", hint:"G·ªçi, nh·∫Øn tin, ch·ª•p ·∫£nh" },
    { id:"router", name:"Router", hint:"Ph√°t Wi-Fi/Internet cho nh√†" },
    { id:"printer", name:"M√°y in", hint:"In t√†i li·ªáu" },
    { id:"usb", name:"USB flash", hint:"L∆∞u tr·ªØ file di ƒë·ªông" },
  ];

  function shuffle(a){ return [...a].sort(()=>Math.random()-0.5); }

  function MatchEnhanced(){
    const [left, setLeft] = useState(()=>shuffle(MATCH_ITEMS));
    const [right, setRight] = useState(()=>shuffle(MATCH_ITEMS.map(i=>({...i, face:i.hint}))));
    const [selected, setSelected] = useState(null);
    const [matches, setMatches] = useState([]);
    const [moves, setMoves] = useState(0);
    const [bestMoves, setBestMoves] = useState(()=>Number(localStorage.getItem('dg_match_best')||0));

    function pickLeft(item){ setSelected({side:'L', item}); }
    function pickRight(item){
      if(!selected){ setSelected({side:'R', item}); return; }
      let a, b;
      if(selected.side === 'L'){ a = selected.item; b = item; }
      else { a = item; b = selected.item; }
      setMoves(m => m+1);
      if(a.id === b.id){
        setMatches(m=>{ const next=[...m,a.id]; 
          if(next.length === MATCH_ITEMS.length){
            const finalMoves = moves+1;
            if(bestMoves===0 || finalMoves < bestMoves){ localStorage.setItem('dg_match_best', String(finalMoves)); setBestMoves(finalMoves); }
            setTimeout(()=>fireConfetti(), 200);
          }
          return next;
        });
      }
      setSelected(null);
    }

    function reset(){
      setLeft(shuffle(MATCH_ITEMS));
      setRight(shuffle(MATCH_ITEMS.map(i=>({...i, face:i.hint}))));
      setMatches([]); setSelected(null); setMoves(0);
    }

    return (
      <div>
        <div className="flex items-center justify-between">
          <div><strong>Gh√©p ƒë√¥i</strong><div className="text-xs text-gray-500">Gh√©p t√™n ‚Üî ch·ª©c nƒÉng</div></div>
          <div className="text-xs text-gray-500">Moves: <span className="font-semibold">{moves}</span> | Best: <span className="font-semibold">{bestMoves||'-'}</span></div>
        </div>

        <div className="mt-3 grid grid-cols-2 gap-3">
          <div>
            <div className="text-xs text-gray-400 mb-2">T√™n thi·∫øt b·ªã</div>
            <div className="grid gap-2">
              {left.map(it=> (
                <button key={it.id}
                  disabled={matches.includes(it.id)}
                  onClick={()=>pickLeft(it)}
                  className={`p-2 text-left border rounded ${selected?.item?.id === it.id && selected.side==='L' ? 'ring-2 ring-indigo-300' : ''} ${matches.includes(it.id) ? 'opacity-40 line-through' : ''}`}>
                  {it.name}
                </button>
              ))}
            </div>
          </div>

          <div>
            <div className="text-xs text-gray-400 mb-2">M√¥ t·∫£</div>
            <div className="grid gap-2">
              {right.map(it=> (
                <button key={it.id}
                  disabled={matches.includes(it.id)}
                  onClick={()=>pickRight(it)}
                  className={`p-2 text-left border rounded ${selected?.item?.id === it.id && selected.side==='R' ? 'ring-2 ring-indigo-300' : ''} ${matches.includes(it.id) ? 'opacity-40 line-through' : ''}`}>
                  {it.face}
                </button>
              ))}
            </div>
          </div>
        </div>

        <div className="mt-3 flex items-center justify-between">
          <div className="text-sm">{matches.length}/{MATCH_ITEMS.length} ƒë√£ gh√©p</div>
          <div><button onClick={reset} className="px-3 py-1 border rounded">L√†m l·∫°i</button></div>
        </div>

        {matches.length === MATCH_ITEMS.length && (
          <div className="mt-3 p-3 bg-green-50 rounded">Tuy·ªát! Ho√†n t·∫•t üéâ B·∫°n d√πng {moves} l∆∞·ª£t.</div>
        )}
      </div>
    );
  }

  /* ---------------- Bluetooth Accordion ---------------- */
  function BluetoothAccordion(){
    const [open, setOpen] = useState('win');
    const toggle = (key)=> setOpen(o => o===key ? null : key);
    return (
      <div className="mt-3 space-y-2">
        <AccItem id="win" title="Windows 10 / 11" open={open==='win'} onToggle={()=>toggle('win')}>
          <ol className="list-decimal pl-5">
            <li>B·∫≠t Bluetooth tr√™n ƒëi·ªán tho·∫°i v√† ƒë·ªÉ c√≥ th·ªÉ ph√°t hi·ªán.</li>
            <li>Tr√™n Windows: Settings ‚Üí Bluetooth & devices ‚Üí Add device ‚Üí Bluetooth ‚Üí ch·ªçn t√™n ƒëi·ªán tho·∫°i.</li>
            <li>X√°c nh·∫≠n m√£ gh√©p (n·∫øu hi·ªán). ƒê·ªÉ g·ª≠i file t·ª´ ƒëi·ªán tho·∫°i: Share ‚Üí Bluetooth ‚Üí ch·ªçn PC. Tr√™n Windows ch·∫•p nh·∫≠n v√† ch·ªçn n∆°i l∆∞u.</li>
          </ol>
        </AccItem>

        <AccItem id="mac" title="macOS" open={open==='mac'} onToggle={()=>toggle('mac')}>
          <ol className="list-decimal pl-5">
            <li>B·∫≠t Bluetooth tr√™n c·∫£ hai thi·∫øt b·ªã.</li>
            <li>Mac: System Settings ‚Üí Bluetooth ‚Üí Pair v·ªõi ƒëi·ªán tho·∫°i.</li>
            <li>V·ªõi Android: d√πng Bluetooth File Exchange ƒë·ªÉ nh·∫≠n file; v·ªõi iPhone, ∆∞u ti√™n AirDrop.</li>
          </ol>
        </AccItem>

        <AccItem id="and" title="Android" open={open==='and'} onToggle={()=>toggle('and')}>
          <ol className="list-decimal pl-5">
            <li>Ch·ªçn file ‚Üí Share ‚Üí Bluetooth ‚Üí ch·ªçn thi·∫øt b·ªã (PC/Mac).</li>
            <li>N·∫øu kh√¥ng th·∫•y thi·∫øt b·ªã: b·∫≠t hi·ªÉn th·ªã (visible) trong Settings ‚Üí Bluetooth.</li>
          </ol>
        </AccItem>

        <AccItem id="ios" title="iPhone (l∆∞u √Ω)" open={open==='ios'} onToggle={()=>toggle('ios')}>
          <ol className="list-decimal pl-5">
            <li>iPhone kh√¥ng chia s·∫ª Bluetooth tr·ª±c ti·∫øp v·ªõi Android/Windows. D√πng AirDrop v·ªõi macOS ho·∫∑c d√πng c√°p/ƒë√°m m√¢y/Snapdrop cho PC/Android.</li>
          </ol>
        </AccItem>
      </div>
    );
  }

  function AccItem({id, title, children, open, onToggle}){
    return (
      <div className="border rounded">
        <button onClick={onToggle} className="w-full flex items-center justify-between p-3">
          <div className="text-sm font-semibold">{title}</div>
          <div className="text-xs text-gray-500">{open ? 'M·ªü' : 'M·ªü'}</div>
        </button>
        {open && <div className="px-3 pb-3 text-sm text-gray-700">{children}</div>}
      </div>
    );
  }

  /* ---------------- Render ---------------- */
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<App />);

  </script>
</body>
</html>
